---
requires:
  stack: true
  serverless: false
---
setup:
  - do:
      security.put_role:
        name: "admin_role"
        body:  >
            {
              "cluster": ["manage_security"]
            }

  - do:
      security.put_user:
        username: "token_user"
        body:  >
          {
            "password" : "x-pack-test-password",
            "roles" : [ "admin_role" ],
            "full_name" : "Token User"
          }
---
teardown:

  - do:
      security.delete_role:
        name: "admin_role"
        ignore: 404

  - do:
      security.delete_user:
        username: "token_user"
        ignore: 404
---
"Tokens":
  - do:
      security.get_token:
        body:
          grant_type: "password"
          username: "token_user"
          password: "x-pack-test-password"

  - match: { type: "Bearer" }
  - is_true: access_token
  - set: { access_token: token }
  - match: { expires_in: 1200 }
  - is_false: scope

  - do:
      security.invalidate_token:
        body:
          token: $token

  - match: { invalidated_tokens: 1 }
  - match: { previously_invalidated_tokens: 0 }
  - match: { error_count: 0 }
