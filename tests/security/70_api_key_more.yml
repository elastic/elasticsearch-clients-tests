---
requires:
  stack: true
  serverless: false
---
setup:
  - do:
      security.put_role:
        name: "api_key_grant_target_role"
        body: >
          {
            "cluster": ["manage_token"],
            "indices": [
              {
                "names": "index",
                "privileges": ["all"]
              }
            ]
          }
  - do:
      security.put_user:
        username: "api_key_grant_target_user"
        body: >
          {
            "password" : "x-pack-test-password-2",
            "roles" : [ "api_key_grant_target_role" ],
            "full_name" : "API key grant target user"
          }
---
teardown:
  - do:
      security.delete_role:
        name: "api_key_grant_target_role"
        ignore: 404
  - do:
      security.delete_user:
        username: "api_key_grant_target_user"
        ignore: 404
---
"Test grant api key with password":
  - do:
      security.grant_api_key:
        body:  >
          {
            "api_key": {
              "name": "my-api-key",
              "expiration": "1d",
              "role_descriptors": {
                "role": {
                  "index": [
                    {
                      "names": ["index"],
                      "privileges": ["read"]
                    }
                  ]
                }
              }
            },
            "grant_type": "password",
            "username": "api_key_grant_target_user",
            "password": "x-pack-test-password-2"
          }
  - match: { name: "my-api-key" }
  - is_true: id
  - is_true: api_key
  - is_true: expiration
  - set: { id: api_key_id }
  - do:
      security.clear_api_key_cache:
        ids: "$api_key_id"

  - match: { _nodes.failed: 0 }
