---
requires:
  stack: true
  serverless: false
---
setup:
  - do:
      security.put_user:
        username: "joe"
        body:  >
          {
            "password": "s3krit-password",
            "roles" : [ "superuser" ]
          }
  - do:
      security.put_role:
        name: "user"
        body:  >
          {
            "cluster": ["monitor"],
            "indices": [
              {
                "names": "*",
                "privileges": ["all"]
              }
            ]
          }
  - do:
      security.put_user:
        username: "unprivileged_user"
        body:  >
          {
            "password": "s3krit-password",
            "roles" : [ "user" ]
          }

---
teardown:
  - do:
      security.delete_user:
        username: "joe"
        ignore: 404
  - do:
      security.delete_role:
        name: "user"
        ignore: 404
  - do:
      security.delete_user:
        username: "unprivileged_user"
        ignore: 404
---
"Test changing users password":
# change password
  - do:
      security.change_password:
        username: "joe"
        body:  >
            {
              "password" : "s3krit-password2"
            }
  # attempt to login with invalid credentials
  - do:
      catch: unauthorized
      headers:
        Authorization: "Basic am9lOnMza3JpdC1wYXNzd29yZA=="
      cluster.health: {}

  # login with new credentials
  - do:
      headers:
        Authorization: "Basic am9lOnMza3JpdC1wYXNzd29yZDI="
      cluster.health: {}
  - match: { timed_out: false }
